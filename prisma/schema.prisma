generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../prisma/dbml"
}

model Mahasiswa {
  id                   Int                 @id @default(autoincrement())
  nim                  String              @unique
  nama                 String
  email                String              @unique
  password             String
  isEligibleForSkripsi Boolean             @default(false)
  isEligibleForSidang  Boolean             @default(false)
  catatanSkripsi       String?
  skripsi              Skripsi?
  pendaftarans         PendaftaranSidang[]
  deletedAt            DateTime? // Soft delete flag
}

model Dosen {
  id          Int                 @id @default(autoincrement())
  nidn        String              @unique
  nama        String
  email       String              @unique
  password    String
  pembimbing1 Skripsi[]           @relation("Pembimbing1")
  pembimbing2 Skripsi[]           @relation("Pembimbing2")
  penguji     PendaftaranSidang[] @relation("PendaftaranSidang_penguji")
  deletedAt   DateTime? // Soft delete flag
}

model Skripsi {
  id                Int                 @id @default(autoincrement())
  judul             String
  id_mahasiswa      Int                 @unique
  id_pembimbing1    Int
  id_pembimbing2    Int?
  buktiPembayaran   String? // URL/filepath bukti bayar
  catatanPembayaran String?
  mahasiswa         Mahasiswa           @relation(fields: [id_mahasiswa], references: [id])
  pembimbing1       Dosen               @relation("Pembimbing1", fields: [id_pembimbing1], references: [id])
  pembimbing2       Dosen?              @relation("Pembimbing2", fields: [id_pembimbing2], references: [id])
  pendaftarans      PendaftaranSidang[]
  deletedAt         DateTime? // Soft delete flag
}

model PendaftaranSidang {
  id                    Int               @id @default(autoincrement())
  id_mahasiswa          Int
  id_skripsi            Int
  id_jadwal             Int?
  buktiPembayaranSidang String? // URL/filepath bukti bayar sidang
  status                String // "Menunggu", "Disetujui", "Ditolak", dll.
  catatan               String?
  tanggal_sidang        DateTime?
  id_penguji            Int?
  mahasiswa             Mahasiswa         @relation(fields: [id_mahasiswa], references: [id])
  skripsi               Skripsi           @relation(fields: [id_skripsi], references: [id])
  jadwal                JadwalSidang?     @relation(fields: [id_jadwal], references: [id])
  penguji               Dosen?            @relation("PendaftaranSidang_penguji", fields: [id_penguji], references: [id])
  approvalHistories     ApprovalHistory[] // Riwayat approval
  deletedAt             DateTime? // Soft delete flag
}

model ApprovalHistory {
  id               Int               @id @default(autoincrement())
  id_pendaftaran   Int
  id_admin         Int
  action           String // "ACC" atau "Tolak"
  catatan          String?
  tanggal_approval DateTime          @default(now())
  pendaftaran      PendaftaranSidang @relation(fields: [id_pendaftaran], references: [id])
  admin            Admin             @relation(fields: [id_admin], references: [id])
}

model JadwalSidang {
  id           Int                 @id @default(autoincrement())
  tanggal      DateTime
  ruangan      String
  pendaftarans PendaftaranSidang[]
}

model Admin {
  id        Int               @id @default(autoincrement())
  username  String            @unique
  password  String
  nama      String
  approvals ApprovalHistory[] // Riwayat approval
  news      News[] // Berita yang dibuat admin
}

model News {
  id        Int      @id @default(autoincrement())
  id_admin  Int
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [id_admin], references: [id])
}
