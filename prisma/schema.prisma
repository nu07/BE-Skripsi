generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator dbml {
//   provider = "prisma-dbml-generator"
//   output   = "../prisma/dbml"
// }

model Mahasiswa {
  id                   String              @id @default(uuid()) // UUID
  nim                  String              @unique
  nama                 String
  email                String              @unique
  password             String
  isEligibleForSkripsi Boolean             @default(false)
  isEligibleForSidang  Boolean             @default(false)
  catatanSkripsi       String?
  skripsi              Skripsi?
  pendaftarans         PendaftaranSidang[]
  deletedAt            DateTime? // Soft delete flag
  approvalSkripsis     ApprovalSkripsi[]   @relation("ApprovalSkripsiMahasiswa")
}

model Dosen {
  id          String              @id @default(uuid()) // UUID
  nidn        String              @unique
  nama        String
  email       String              @unique
  password    String
  pembimbing1 Skripsi[]           @relation("Pembimbing1")
  pembimbing2 Skripsi[]           @relation("Pembimbing2")
  // Ganti relasi penguji tunggal dengan dua
  penguji1    PendaftaranSidang[] @relation("Penguji1")
  penguji2    PendaftaranSidang[] @relation("Penguji2")

  deletedAt        DateTime? // Soft delete flag
  approvalSkripsis ApprovalSkripsi[] @relation("ApprovalDosen")
}

model Skripsi {
  id                  String              @id @default(uuid()) // UUID
  judul               String
  id_mahasiswa        String              @unique // Tambahkan @unique di sini
  id_pembimbing1      String?
  id_pembimbing2      String?
  buktiPembayaran     String? // URL/filepath bukti bayar
  catatanPembayaran   String?
  status              String?
  acc_pembimbing1     Boolean? // default: false
  acc_pembimbing2     Boolean? // default: false
  catatan_pembimbing1 String?
  catatan_pembimbing2 String?
  mahasiswa           Mahasiswa           @relation(fields: [id_mahasiswa], references: [id])
  pembimbing1         Dosen?              @relation("Pembimbing1", fields: [id_pembimbing1], references: [id])
  pembimbing2         Dosen?              @relation("Pembimbing2", fields: [id_pembimbing2], references: [id])
  pendaftarans        PendaftaranSidang[]
  deletedAt           DateTime? // Soft delete flag
}

model PendaftaranSidang {
  id                    String    @id @default(uuid()) // UUID
  id_mahasiswa          String
  id_skripsi            String
  id_jadwal             String?
  buktiPembayaranSidang String? // URL/filepath bukti bayar sidang.
  status                String // "Menunggu", "Disetujui", "Ditolak", dll.
  catatan               String?
  tanggal_sidang        DateTime?
  // Ganti penguji tunggal jadi dua penguji
  id_penguji1           String?
  id_penguji2           String?

  catatan_penguji1      String?
  catatan_penguji2      String?

  mahasiswa Mahasiswa @relation(fields: [id_mahasiswa], references: [id])
  skripsi   Skripsi   @relation(fields: [id_skripsi], references: [id])
  // Relasi baru ke dua dosen penguji
  penguji1  Dosen?    @relation("Penguji1", fields: [id_penguji1], references: [id])
  penguji2  Dosen?    @relation("Penguji2", fields: [id_penguji2], references: [id])

  approvalHistories ApprovalHistory[] // Riwayat approval
  deletedAt         DateTime? // Soft delete flag
}

model ApprovalSkripsi {
  id           String   @id @default(uuid())
  id_mahasiswa String
  id_dosen     String
  status       Boolean // 'true' atau 'false'
  catatan      String?
  role         String // 'pembimbing1' atau 'pembimbing2'
  createdAt    DateTime @default(now())

  mahasiswa Mahasiswa @relation("ApprovalSkripsiMahasiswa", fields: [id_mahasiswa], references: [id])
  dosen     Dosen     @relation("ApprovalDosen", fields: [id_dosen], references: [id])

  @@unique([id_mahasiswa, id_dosen, role]) // agar 1 dosen hanya 1 approval per role
}

model ApprovalHistory {
  id               String            @id @default(uuid()) // UUID
  id_pendaftaran   String
  id_admin         String
  action           String // "ACC" atau "Tolak"
  catatan          String?
  tanggal_approval DateTime          @default(now())
  pendaftaran      PendaftaranSidang @relation(fields: [id_pendaftaran], references: [id])
  admin            Admin             @relation(fields: [id_admin], references: [id])
}

model Admin {
  id        String            @id @default(uuid()) // UUID
  username  String            @unique
  password  String
  nama      String
  approvals ApprovalHistory[] // Riwayat approval
  news      News[] // Berita yang dibuat admin
  deletedAt DateTime? // Soft delete flag
}

model News {
  id        String   @id @default(uuid()) // UUID
  id_admin  String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin    @relation(fields: [id_admin], references: [id])
}
